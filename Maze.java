/**
 * @author 		Bernard Lucas & Harsh Patel
 * @date		June 10th 2014
 * @filename	Maze.java
 * @description	initializes map data, map textures and paints tiles
 */

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Graphics;


public class Maze {
 
 //Declaring 2D variables to store map and textures
 private int map[][];
 private int txtWall[][];
 private int txtWallF[][];
 private int txtWallM[][];
 private int txtKey[][];
 
 //declaring Color
 public static Color clrFloor;
 
 /**
  * Constructor assigns which map will be given to GameMain class and assigns textures
  * @param lvl
  */
 public Maze (int lvl){
  
 //switch statement to determine which map and floor color is used in the game based on 'lvl' (Level)
 /*
  * map legend:
  * 0:	empty tile
  * 1:	wall
  * 2:	false wall
  * 3:	key
  * 4:	moveable wall
  * 9:	player
  */
  switch(lvl){
  case 1:
      int a[][] =    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			          {1,9,1,0,0,0,0,0,0,4,0,0,4,0,0,0,1,1,3,0,1},
			          {1,4,1,2,1,1,1,1,0,1,0,1,1,1,4,0,0,1,0,0,1},
			          {1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1},
			          {1,0,1,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1},
			          {1,1,1,0,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,0,1},
			          {1,1,1,4,1,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,1},
			          {1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1},
			          {1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1},
			          {1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,1},
			          {1,0,1,1,0,1,1,1,1,1,1,1,4,4,0,0,1,4,0,0,1},
			          {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,0,1,0,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
      
      Color ac = new Color(0,120,0);
      
      map = a;
      clrFloor = ac;
   break;
  case 2:
      int b[][] =    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			          {1,0,0,0,1,0,0,2,0,2,0,2,0,2,0,2,3,1,9,0,1},
			          {1,0,0,4,0,0,0,1,1,1,1,1,1,1,1,1,0,1,0,0,1},
			          {1,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,1},
			          {1,0,0,0,0,1,0,0,4,1,1,0,1,1,4,1,1,1,1,0,1},
			          {1,4,1,1,0,1,4,1,0,1,2,4,2,1,0,1,0,0,0,0,1},
			          {1,0,0,1,0,0,0,1,0,1,2,2,2,1,0,1,0,1,1,0,1},
			          {1,0,0,1,0,1,0,1,0,1,2,2,2,1,0,0,0,1,0,0,1},
			          {1,1,4,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,1},
			          {1,0,0,1,0,0,0,1,0,0,1,0,4,0,0,0,0,0,0,0,1},
			          {1,0,1,1,0,1,0,1,1,2,1,1,1,1,1,1,1,1,0,0,1},
			          {1,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

      Color bc  = new Color(0,0,60);
      
      map = b;
      clrFloor = bc;
   break;
  case 3:
      int c[][] =    {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			          {1,0,4,0,4,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			          {1,9,4,0,4,0,4,0,0,1,1,1,1,0,1,1,1,1,1,0,1},
			          {1,0,4,0,4,0,4,0,0,1,1,1,1,0,0,0,0,4,2,0,1},
			          {1,0,4,0,4,0,0,1,0,0,0,0,1,1,1,4,4,4,2,0,1},
			          {1,1,1,0,1,1,1,1,1,1,1,0,4,0,1,0,0,0,1,1,1},
			          {1,3,1,1,1,1,1,1,2,2,2,1,0,1,1,1,1,0,0,0,1},
			          {1,2,1,2,2,2,2,2,4,4,2,0,0,1,1,1,1,1,0,4,1},
			          {1,2,1,2,1,1,1,1,2,4,4,1,0,1,1,0,4,0,4,0,1},
			          {1,2,1,2,1,2,2,2,2,2,2,1,0,1,1,0,0,4,0,4,1},
			          {1,2,1,2,1,0,1,1,1,1,1,1,0,1,1,0,4,0,4,0,1},
			          {1,2,2,2,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,0,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
      
      Color cc  = new Color(132,45,27);
      
      map = c;
      clrFloor = cc;
   break;
  }
  
  /*Initializing 2D arrays to be used as textures; each number represents a 2x2 pixel square
   *different numbers represent different colors
   *
   *texture legend:
   *0:	light grey
   *1:	grey
   *2:	dark grey
   *3:	white
   *4:	level color
   *5:	yellow
   *6:	red
   *7:	blue
   *8:	black
   */
     int wall[][] =   {{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			           {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			           {3,3,3,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,3,3,3,3,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			           {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			           {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			           {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  txtWall = wall;
  
  int wallfalse[][] ={{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1},
			          {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			          {3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1},
			          {3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1},
			          {3,0,3,3,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1},
			          {3,0,0,0,3,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1},
			          {3,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1},
			          {3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1},
			          {3,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1},
			          {3,3,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1},
			          {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			          {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			          {3,3,3,3,3,3,3,3,3,3,3,0,1,3,3,3,3,3,3,3,3,3,3,3,3,1},
			          {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,3,0,0,0,0,0,0,0,0,1},
			          {0,0,0,0,0,0,0,0,0,0,1,1,1,3,0,3,0,0,0,0,0,0,0,0,0,1},
			          {0,0,0,0,0,1,0,0,1,1,0,0,1,3,3,3,0,0,0,0,0,0,0,0,0,1},
			          {0,0,1,0,0,0,1,1,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			          {1,1,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,1,1,0,1,1},
			          {0,0,0,0,0,0,0,0,0,0,1,0,1,3,0,0,0,0,0,0,0,0,0,1,0,1},
			          {0,0,0,0,0,0,0,0,0,1,0,1,1,3,3,0,0,3,3,0,0,0,0,0,0,1},
			          {0,0,0,0,0,0,0,1,1,0,0,0,1,3,0,3,3,0,0,0,0,0,0,0,0,1},
			          {0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,0,1},
			          {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  txtWallF = wallfalse;
  
  int key[][] =   	 {{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,5,5,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,5,5,4,4,5,5,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,5,5,5,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,5,5,4,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,5,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,5,4,4,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,5,5,4,4,4,4,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,5,4,4,4,4,4,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,5,5,4,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4}};
  txtKey= key;
  
  int wallmove[][] =   {{3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,3,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,3,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,3,2,2,0,2,0,2,2,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,3,2,2,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,0,1,1},
				        {3,0,0,3,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,0,1,1},
				        {3,0,3,2,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,2,0,0,1,1},
				        {3,0,2,2,2,2,2,2,2,2,2,4,4,4,2,2,2,2,2,2,2,2,2,0,1,1},
				        {3,0,0,2,2,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3,2,2,0,0,1,1},
				        {3,0,0,0,2,2,0,0,0,0,0,0,2,0,0,0,0,0,3,2,2,0,0,0,1,1},
				        {3,0,0,0,0,2,2,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,2,0,0,2,0,3,2,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,2,2,0,2,3,2,2,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
				        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
				        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
  txtWallM = wallmove;
  
 }
 
 /**
  * returns map data
  * @return map 2D array
  */
 public int[][] getMap(){
	 return map;
 }

 /**
  * paints entire map
  * @param g graphics
  * @param map	map data
  */
 public void paint(Graphics g, int map[][]){
	 	//for loop goes through every index of array and checks the integer stored
	     for(int x = 0; x <=20; x++){
	     	for(int y = 0; y <=12; y++){
	     			//If statement to determine whether game paints solid color or texture
					if(map[y][x]!= 0){
						this.paintTile(g,x,y,map[y][x]);	//calls paintTile to paint tile texture
					}else{
			     		g.setColor(clrFloor);				//paints solid color
			     		g.fillRect(x*50,y*50,50,50);
					}
	     	}
	     }
 }
 
 /**
  * determines which texture to paint based on integer type found in 2d array
  * @param g graphics
  * @param cx x coordinate of tile
  * @param cy y coordinate of tile
  * @param type type of tile
  */
 public void paintTile(Graphics g, int cx, int cy, int type ){
  
  int tile[][];
  
  //switch statement to determine which texture to paint based on type of tile
  switch (type){
  case 1:
   tile = txtWall;
   break;
  case 2:
   tile = txtWallF;
   break;
  case 3:	  
   tile = txtKey;
   break;
  case 4:
   tile = txtWallM;
   break;
  default:
   tile = txtWall;
  }
  
  paintTexture(g,cx,cy,tile);					//calls paintTexture method to paint tile
 }
 
 /**
  * paints the player's character
  * @param g graphics
  * @param pX player's x coordinate
  * @param pY player's y coordinate
  */
 public void paintPlayer(Graphics g, int pX, int pY){
	 
	 //initializing player texture; uses same colors as tile textures
	 int player[][]= {{4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,3,3,3,5,5,5,3,3,3,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,3,3,3,5,5,5,5,5,5,5,3,3,3,4,4,4,4,4,4,1},
			          {4,4,4,4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,3,0,4,4,4,4,4,1},
			          {4,4,4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,4,4,1},
			          {4,4,4,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,4,4,4,1},
			          {4,4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,4,1},
			          {4,4,4,3,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,4,4,4,1},
			          {4,4,3,3,8,8,3,8,8,8,8,8,5,8,8,3,8,8,8,8,8,0,0,4,4,1},
			          {4,4,3,5,5,8,8,3,8,8,8,5,5,5,8,8,3,8,8,8,5,5,0,4,4,1},
			          {4,4,3,5,5,5,8,8,8,8,5,5,5,5,5,8,8,8,8,5,5,5,0,4,4,1},
			          {4,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,4,1},
			          {4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,1},
			          {4,4,4,3,5,5,5,5,5,8,8,8,8,8,8,8,5,5,5,5,5,0,4,4,4,1},
			          {4,4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,4,1},
			          {4,4,4,4,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,4,4,4,4,1},
			          {4,4,4,4,3,3,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,4,4,1},
			          {4,4,4,4,4,0,0,5,5,5,5,5,5,5,5,5,5,5,0,0,4,4,4,4,4,1},
			          {4,4,4,4,4,4,0,0,0,5,5,5,5,5,5,5,0,0,0,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,0,0,0,5,5,5,0,0,0,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1},
			          {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1},
			          {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};
	 
	 //calls paintTexture to paint player
	 paintTexture(g,pX,pY,player);
 }
 
 /**
  * paints the texture of various tiles/player
  * @param g graphics
  * @param cx tile x coordinate
  * @param cy tile y coordinate
  * @param tile tile texture
  */
 public void paintTexture (Graphics g, int cx, int cy, int[][] tile){
	 
	 //for loop goes through every element of the 2D array
	 for(int x = 0; x <=24; x++){
    	 for(int y = 0; y<=24; y++){
    	 //switch statement sets color based on integer found in element
		       switch(tile[y][x]){
		       case 0:
		    	   g.setColor(Color.LIGHT_GRAY);
		    	   break;
		       case 1:
		    	   g.setColor(Color.GRAY);
		    	   break;
		       case 2:
		    	   g.setColor(Color.DARK_GRAY);
		    	   break;		        
		       case 3:
		    	   g.setColor(Color.WHITE);
		    	   break;
		       case 4:
		    	   g.setColor(clrFloor);
		    	   break;
		       case 5: 
		    	   g.setColor(Color.YELLOW);
		    	   break;
		       case 6:
		    	   g.setColor(Color.RED);
		    	   break;
		       case 7:
		    	   g.setColor(Color.BLUE);
		    	   break;
		       case 8:
		    	   g.setColor(Color.BLACK);
		       }
		       
		       //paints 2x2 pixel square 
		       g.fillRect(cx*50+(x*2),cy*50+(y*2),2,2); 
	      }
     }
    }
}
